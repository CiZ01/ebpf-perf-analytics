/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __PROFILER_SKEL_H__
#define __PROFILER_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct profiler {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *counts;
	} maps;
	struct {
		struct bpf_program *fexit_XXX;
	} progs;
	struct {
		struct bpf_link *fexit_XXX;
	} links;

#ifdef __cplusplus
	static inline struct profiler *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct profiler *open_and_load();
	static inline int load(struct profiler *skel);
	static inline int attach(struct profiler *skel);
	static inline void detach(struct profiler *skel);
	static inline void destroy(struct profiler *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
profiler__destroy(struct profiler *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
profiler__create_skeleton(struct profiler *obj);

static inline struct profiler *
profiler__open_opts(const struct bpf_object_open_opts *opts)
{
	struct profiler *obj;
	int err;

	obj = (struct profiler *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = profiler__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	profiler__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct profiler *
profiler__open(void)
{
	return profiler__open_opts(NULL);
}

static inline int
profiler__load(struct profiler *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct profiler *
profiler__open_and_load(void)
{
	struct profiler *obj;
	int err;

	obj = profiler__open();
	if (!obj)
		return NULL;
	err = profiler__load(obj);
	if (err) {
		profiler__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
profiler__attach(struct profiler *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
profiler__detach(struct profiler *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *profiler__elf_bytes(size_t *sz);

static inline int
profiler__create_skeleton(struct profiler *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "profiler";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "counts";
	s->maps[0].map = &obj->maps.counts;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "fexit_XXX";
	s->progs[0].prog = &obj->progs.fexit_XXX;
	s->progs[0].link = &obj->links.fexit_XXX;

	s->data = profiler__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *profiler__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x68\x10\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1c\0\
\x01\0\xb7\x01\0\0\0\0\0\0\x63\x1a\xfc\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\
\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\
\x15\0\x03\0\0\0\0\0\x79\x01\0\0\0\0\0\0\x07\x01\0\0\x01\0\0\0\x7b\x10\0\0\0\0\
\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x23\0\0\0\x05\0\x08\0\x02\0\0\
\0\x08\0\0\0\x15\0\0\0\x04\x08\x10\x02\x30\x9f\x04\x10\x58\x02\x7a\x04\0\x04\
\x38\x58\x01\x50\0\x01\x11\x01\x25\x25\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\
\x11\x1b\x12\x06\x73\x17\x74\x17\x8c\x01\x17\0\0\x02\x34\0\x03\x25\x49\x13\x3f\
\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x03\x01\x01\x49\x13\0\0\x04\x21\0\x49\x13\x37\
\x0b\0\0\x05\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\0\x06\x24\0\x03\x25\x0b\x0b\x3e\
\x0b\0\0\x07\x13\x01\x0b\x0b\x3a\x0b\x3b\x0b\0\0\x08\x0d\0\x03\x25\x49\x13\x3a\
\x0b\x3b\x0b\x38\x0b\0\0\x09\x0f\0\x49\x13\0\0\x0a\x34\0\x03\x25\x49\x13\x3a\
\x0b\x3b\x0b\0\0\x0b\x26\0\x49\x13\0\0\x0c\x15\x01\x49\x13\x27\x19\0\0\x0d\x05\
\0\x49\x13\0\0\x0e\x0f\0\0\0\x0f\x26\0\0\0\x10\x2e\x01\x03\x25\x3a\x0b\x3b\x0b\
\x27\x19\x49\x13\x20\x21\x01\0\0\x11\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\
\x12\x34\0\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x13\x16\0\x49\x13\x03\x25\x3a\
\x0b\x3b\x0b\0\0\x14\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\x19\x03\x25\x3a\x0b\
\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x15\x1d\x01\x31\x13\x55\x23\x58\x0b\x59\
\x0b\x57\x0b\0\0\x16\x34\0\x02\x22\x31\x13\0\0\0\x5d\x01\0\0\x05\0\x01\x08\0\0\
\0\0\x01\0\x0c\0\x01\x08\0\0\0\0\0\0\0\x02\x02\x68\0\0\0\x08\0\0\0\x0c\0\0\0\
\x0c\0\0\0\x02\x03\x36\0\0\0\x01\x17\x02\xa1\0\x03\x42\0\0\0\x04\x46\0\0\0\x04\
\0\x05\x04\x06\x01\x06\x05\x08\x07\x02\x06\x55\0\0\0\x01\x0b\x02\xa1\x01\x07\
\x20\x01\x05\x08\x07\x7e\0\0\0\x01\x07\0\x08\x09\x93\0\0\0\x01\x08\x08\x08\x0a\
\xa4\0\0\0\x01\x09\x10\x08\x0b\xb5\0\0\0\x01\x0a\x18\0\x09\x83\0\0\0\x03\x8f\0\
\0\0\x04\x46\0\0\0\x06\0\x05\x08\x05\x04\x09\x98\0\0\0\x03\x8f\0\0\0\x04\x46\0\
\0\0\x04\0\x09\xa9\0\0\0\x03\x8f\0\0\0\x04\x46\0\0\0\x08\0\x09\xba\0\0\0\x03\
\x8f\0\0\0\x04\x46\0\0\0\x01\0\x0a\x0c\xce\0\0\0\x02\x38\x0b\xd3\0\0\0\x09\xd8\
\0\0\0\x0c\xe8\0\0\0\x0d\xe8\0\0\0\x0d\xe9\0\0\0\0\x0e\x09\xee\0\0\0\x0f\x10\
\x0d\x01\x0e\x8f\0\0\0\x11\x0e\x01\x0e\x10\x01\0\0\x12\x10\x01\x10\x19\x01\0\0\
\x12\x13\x01\x11\x25\x01\0\0\0\x09\x15\x01\0\0\x05\x0f\x07\x08\x13\x21\x01\0\0\
\x12\x03\x1b\x05\x11\x07\x04\x09\x2a\x01\0\0\x13\x15\x01\0\0\x14\x03\x1f\x14\
\x02\x68\0\0\0\x01\x5a\x15\x01\x0e\x8f\0\0\0\x11\x0e\x01\x0e\x10\x01\0\0\x15\
\xef\0\0\0\0\x01\x0e\x05\x16\0\xff\0\0\0\x16\x01\x07\x01\0\0\0\0\0\x13\0\0\0\
\x05\0\x08\0\x01\0\0\0\x04\0\0\0\x04\x08\x18\x04\x20\x58\0\x5c\0\0\0\x05\0\0\0\
\0\0\0\0\x27\0\0\0\x3f\0\0\0\x6d\0\0\0\x76\0\0\0\x7b\0\0\0\x8f\0\0\0\x96\0\0\0\
\x9b\0\0\0\x9f\0\0\0\xa8\0\0\0\xb3\0\0\0\xbf\0\0\0\xd3\0\0\0\xe1\0\0\0\xe5\0\0\
\0\xf8\0\0\0\xfd\0\0\0\x0a\x01\0\0\x10\x01\0\0\x16\x01\0\0\x1c\x01\0\0\x55\x62\
\x75\x6e\x74\x75\x20\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\
\x31\x34\x2e\x30\x2e\x30\x2d\x31\x75\x62\x75\x6e\x74\x75\x31\x2e\x31\0\x70\x72\
\x6f\x66\x69\x6c\x65\x72\x2f\x70\x72\x6f\x66\x69\x6c\x65\x72\x2e\x62\x70\x66\
\x2e\x63\0\x2f\x6f\x70\x74\x2f\x65\x62\x70\x66\x2d\x70\x65\x72\x66\x2d\x61\x6e\
\x61\x6c\x79\x74\x69\x63\x73\x2f\x65\x62\x70\x66\x2d\x70\x72\x6f\x67\x72\x61\
\x6d\x73\x2f\x6c\x6f\x61\x64\x65\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x63\
\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\
\x45\x5f\x5f\0\x63\x6f\x75\x6e\x74\x73\0\x74\x79\x70\x65\0\x69\x6e\x74\0\x6b\
\x65\x79\x5f\x73\x69\x7a\x65\0\x76\x61\x6c\x75\x65\x5f\x73\x69\x7a\x65\0\x6d\
\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\
\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\0\x5f\x5f\x5f\x5f\x66\x65\x78\x69\x74\
\x5f\x58\x58\x58\0\x63\x74\x78\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\
\x6e\x67\x20\x6c\x6f\x6e\x67\0\x7a\x65\x72\x6f\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x33\x32\0\x63\x6f\x75\x6e\x74\0\x5f\x5f\x75\
\x36\x34\0\x66\x65\x78\x69\x74\x5f\x58\x58\x58\0\x1c\0\0\0\x05\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\
\xa0\x01\0\0\xa0\x01\0\0\x5a\x01\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\
\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x06\
\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\
\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\x02\x08\0\0\
\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\x02\
\x0a\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\0\0\0\0\x04\
\0\0\x04\x20\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\
\x27\0\0\0\x07\0\0\0\x80\0\0\0\x32\0\0\0\x09\0\0\0\xc0\0\0\0\x3e\0\0\0\0\0\0\
\x0e\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0e\0\0\0\x45\0\0\0\0\0\0\x01\x08\0\
\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x58\0\0\0\x0d\0\0\0\x5c\0\0\0\x01\
\0\0\x0c\x0f\0\0\0\x3e\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\
\x03\0\0\0\0\x11\0\0\0\x04\0\0\0\x04\0\0\0\x43\x01\0\0\0\0\0\x0e\x12\0\0\0\x01\
\0\0\0\x4c\x01\0\0\x01\0\0\x0f\0\0\0\0\x0c\0\0\0\0\0\0\0\x20\0\0\0\x52\x01\0\0\
\x01\0\0\x0f\0\0\0\0\x13\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\
\x65\0\x6b\x65\x79\x5f\x73\x69\x7a\x65\0\x76\x61\x6c\x75\x65\x5f\x73\x69\x7a\
\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x63\x6f\x75\x6e\x74\x73\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x63\
\x74\x78\0\x66\x65\x78\x69\x74\x5f\x58\x58\x58\0\x66\x65\x78\x69\x74\x2f\x2a\0\
\x2f\x6f\x70\x74\x2f\x65\x62\x70\x66\x2d\x70\x65\x72\x66\x2d\x61\x6e\x61\x6c\
\x79\x74\x69\x63\x73\x2f\x65\x62\x70\x66\x2d\x70\x72\x6f\x67\x72\x61\x6d\x73\
\x2f\x6c\x6f\x61\x64\x65\x72\x2f\x2e\x2f\x70\x72\x6f\x66\x69\x6c\x65\x72\x2f\
\x70\x72\x6f\x66\x69\x6c\x65\x72\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x42\
\x50\x46\x5f\x50\x52\x4f\x47\x28\x66\x65\x78\x69\x74\x5f\x58\x58\x58\x29\0\x20\
\x20\x20\x20\x5f\x5f\x75\x33\x32\x20\x7a\x65\x72\x6f\x20\x3d\x20\x30\x3b\0\x20\
\x20\x20\x20\x5f\x5f\x75\x36\x34\x20\x2a\x63\x6f\x75\x6e\x74\x20\x3d\x20\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\
\x26\x63\x6f\x75\x6e\x74\x73\x2c\x20\x26\x7a\x65\x72\x6f\x29\x3b\0\x20\x20\x20\
\x20\x69\x66\x20\x28\x63\x6f\x75\x6e\x74\x29\0\x20\x20\x20\x20\x20\x20\x20\x20\
\x2a\x63\x6f\x75\x6e\x74\x20\x2b\x3d\x20\x31\x3b\0\x63\x68\x61\x72\0\x5f\x6c\
\x69\x63\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\
\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x7c\0\0\0\x90\0\0\0\0\
\0\0\0\x08\0\0\0\x66\0\0\0\x01\0\0\0\0\0\0\0\x10\0\0\0\x10\0\0\0\x66\0\0\0\x07\
\0\0\0\0\0\0\0\x6e\0\0\0\xb6\0\0\0\0\x38\0\0\x08\0\0\0\x6e\0\0\0\xce\0\0\0\x0b\
\x40\0\0\x18\0\0\0\x6e\0\0\0\0\0\0\0\0\0\0\0\x20\0\0\0\x6e\0\0\0\xe2\0\0\0\x14\
\x44\0\0\x38\0\0\0\x6e\0\0\0\x1a\x01\0\0\x09\x48\0\0\x40\0\0\0\x6e\0\0\0\x29\
\x01\0\0\x10\x4c\0\0\x58\0\0\0\x6e\0\0\0\xb6\0\0\0\x05\x38\0\0\x0c\0\0\0\xff\
\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\0\
\0\0\0\0\0\0\xb4\0\0\0\x05\0\x08\0\x82\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\
\x01\x01\0\0\0\x01\0\0\x01\x01\x01\x1f\x04\0\0\0\0\x2e\0\0\0\x39\0\0\0\x4a\0\0\
\0\x03\x01\x1f\x02\x0f\x05\x1e\x04\x63\0\0\0\0\xc8\x02\x1d\xdc\x48\x60\xfe\xc2\
\xd4\x44\xdc\x54\x09\xa7\x3e\x0f\x7b\0\0\0\x01\xc8\x02\x1d\xdc\x48\x60\xfe\xc2\
\xd4\x44\xdc\x54\x09\xa7\x3e\x0f\x8a\0\0\0\x02\x65\xe4\xdc\x8e\x31\x21\xf9\x1a\
\x5c\x2c\x9e\xb8\x56\x3c\x56\x92\x9c\0\0\0\x03\xb8\x10\xf2\x70\x73\x3e\x10\x63\
\x19\xb6\x7e\xf5\x12\xc6\x24\x6e\0\x09\x02\0\0\0\0\0\0\0\0\x03\x0d\x01\x05\x0b\
\x0a\x22\x06\x03\x70\x20\x05\x14\x06\x03\x11\x2e\x05\x09\x3d\x05\x10\x21\x05\
\x05\x37\x02\x02\0\x01\x01\x2f\x6f\x70\x74\x2f\x65\x62\x70\x66\x2d\x70\x65\x72\
\x66\x2d\x61\x6e\x61\x6c\x79\x74\x69\x63\x73\x2f\x65\x62\x70\x66\x2d\x70\x72\
\x6f\x67\x72\x61\x6d\x73\x2f\x6c\x6f\x61\x64\x65\x72\0\x2e\x2f\x70\x72\x6f\x66\
\x69\x6c\x65\x72\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x62\x70\
\x66\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x61\x73\x6d\x2d\x67\
\x65\x6e\x65\x72\x69\x63\0\x70\x72\x6f\x66\x69\x6c\x65\x72\x2f\x70\x72\x6f\x66\
\x69\x6c\x65\x72\x2e\x62\x70\x66\x2e\x63\0\x70\x72\x6f\x66\x69\x6c\x65\x72\x2e\
\x62\x70\x66\x2e\x63\0\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\
\x73\x2e\x68\0\x69\x6e\x74\x2d\x6c\x6c\x36\x34\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd9\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\x01\0\0\0\0\x03\
\0\x58\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x15\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\
\x68\0\0\0\0\0\0\0\x42\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\xaf\
\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\
\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\
\x09\0\0\0\x23\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x27\0\0\0\0\0\0\0\x03\0\0\0\
\x04\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x0c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x1c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x24\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x2c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x34\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x3c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x44\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x4c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x54\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x58\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x5c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x0f\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\
\x0e\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x98\x01\0\0\0\0\0\0\x04\0\0\0\
\x0e\0\0\0\xb0\x01\0\0\0\0\0\0\x04\0\0\0\x0f\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\
\x0a\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\
\x0c\0\0\0\x26\0\0\0\0\0\0\0\x03\0\0\0\x0c\0\0\0\x2a\0\0\0\0\0\0\0\x03\0\0\0\
\x0c\0\0\0\x2e\0\0\0\0\0\0\0\x03\0\0\0\x0c\0\0\0\x3a\0\0\0\0\0\0\0\x03\0\0\0\
\x0c\0\0\0\x4f\0\0\0\0\0\0\0\x03\0\0\0\x0c\0\0\0\x64\0\0\0\0\0\0\0\x03\0\0\0\
\x0c\0\0\0\x79\0\0\0\0\0\0\0\x03\0\0\0\x0c\0\0\0\x91\0\0\0\0\0\0\0\x02\0\0\0\
\x02\0\0\0\x0d\x0f\x0e\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\
\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\
\x64\x65\x62\x75\x67\x5f\x72\x6e\x67\x6c\x69\x73\x74\x73\0\x2e\x64\x65\x62\x75\
\x67\x5f\x6c\x6f\x63\x6c\x69\x73\x74\x73\0\x63\x6f\x75\x6e\x74\x73\0\x2e\x72\
\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\
\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x64\
\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\
\x65\x62\x75\x67\x5f\x61\x64\x64\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\
\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\
\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\
\x6c\x69\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\
\x65\0\x70\x72\x6f\x66\x69\x6c\x65\x72\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\
\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x66\x65\x78\x69\x74\x5f\x58\
\x58\x58\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x42\x42\x30\x5f\x32\0\x2e\x72\
\x65\x6c\x66\x65\x78\x69\x74\x2f\x2a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xe8\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x43\x0f\0\0\0\0\0\0\x1e\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\
\x01\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x68\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x12\x01\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x0b\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x1b\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb0\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xd0\0\0\0\0\0\0\0\x27\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf7\0\0\0\0\0\0\0\
\x0d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\x02\0\0\0\0\0\0\x61\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0c\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x1b\0\0\
\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x65\x03\0\0\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4d\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x7c\x03\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x49\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\
\x0c\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\x1b\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x10\
\0\0\0\0\0\0\0\x66\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdc\x03\0\
\0\0\0\0\0\x26\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\x85\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x05\0\0\0\0\0\0\
\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x0d\0\0\0\0\0\0\x30\0\0\0\0\0\
\0\0\x1b\0\0\0\x0f\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x06\x01\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x24\x05\0\0\0\0\0\0\x12\x03\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x01\0\0\x09\0\0\0\x40\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x0d\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x1b\0\0\0\x11\
\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x38\x08\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x10\x0e\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\x1b\0\0\0\x13\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\xcc\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x08\
\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xc8\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x0e\0\0\0\0\0\0\
\x20\0\0\0\0\0\0\0\x1b\0\0\0\x15\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xbc\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x09\0\0\0\0\0\0\xb8\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x0e\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x1b\0\
\0\0\x17\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x71\0\0\0\x01\0\0\0\x30\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x09\0\0\0\0\0\0\xa7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xa1\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\
\0\0\0\0\0\0\0\0\0\0\x40\x0f\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\x1b\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x70\x0a\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x08\0\0\0\
\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct profiler *profiler::open(const struct bpf_object_open_opts *opts) { return profiler__open_opts(opts); }
struct profiler *profiler::open_and_load() { return profiler__open_and_load(); }
int profiler::load(struct profiler *skel) { return profiler__load(skel); }
int profiler::attach(struct profiler *skel) { return profiler__attach(skel); }
void profiler::detach(struct profiler *skel) { profiler__detach(skel); }
void profiler::destroy(struct profiler *skel) { profiler__destroy(skel); }
const void *profiler::elf_bytes(size_t *sz) { return profiler__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
profiler__assert(struct profiler *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __PROFILER_SKEL_H__ */

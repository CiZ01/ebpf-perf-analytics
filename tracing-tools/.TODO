# 1. gestione tracepoint
Sembra un'ottima idea trovare un modo per gestire questi tracepoint ingiro 
per il codice in maniera efficace.

L'idea principale è quella di creare una libreria in C che mette a disposizione
delle macro che poi vengono sostituite e triggerano il programma interessato.

es. TRACE_CPU_CYCLES( *name* )
```
TRACE_CPU_CYCLES(parse_eth);
eth_proto = parse_eth(data, data_end);
TRACE_CPU_CYCLES(parse_eth);
```
dove _parse_eth_ è il nome del trace che mi interessa tenere traccia (è un caso che si chiami come la funzione, ho poca inventiva ok). La prima chiamata recupera il numero di cycles, la seconda recupera di nuovo il numero di cycles, chiude la finestra di studio e fa la differenza per vedere quanto questa sezione interessata ha impattato.

# link utili

- [ Show performance of read-ahead cache ](https://github.com/iovisor/bcc/blob/master/tools/readahead_example.txt)